// Generated by CoffeeScript 1.7.1
(function() {
  var Log, extend, factory, format, getContentFromDataType, getFileAndLine, isSupport, logfile, output2Console, output2file, _colors, _config, _fs, _moment, _path;

  _colors = require('colors');

  _config = require('./config.json');

  _moment = require('moment');

  _fs = require('fs');

  _path = require('path');

  logfile = require('./file');

  _colors.setTheme({
    info: 'green',
    help: 'cyan',
    warn: 'yellow',
    debug: 'blue',
    error: 'red'
  });

  isSupport = (function() {
    var err;
    err = new Error();
    if (!err.stack) {
      return console.log("The version of node  do not support slow4js".warn);
    }
    return true;
  })();

  getFileAndLine = function() {
    var cwd, fileInfo, info, reg, stack;
    if (!isSupport) {
      return '';
    }
    stack = new Error().stack;
    info = stack.split('\n')[4];
    cwd = process.cwd();
    if (!info) {
      return '';
    }
    reg = new RegExp("" + cwd + "([^:])+:(\\d)+", "g");
    if (fileInfo = info.match(reg)[0]) {
      return fileInfo.replace(cwd, '');
    }
    return '';
  };

  getContentFromDataType = function(content) {
    if (content instanceof Error) {
      return content.stack;
    }
    if (content instanceof Object || content instanceof Array) {
      return JSON.stringify(content);
    }
    return "" + content;
  };

  format = function(content, type) {
    var loginfo;
    loginfo = [];
    content = getContentFromDataType(content);
    if (_config.timestamp) {
      loginfo.push(_moment().format(_config.timestamp));
    }
    if (_config.lineInfo) {
      loginfo.push(getFileAndLine());
    }
    if (_config.levelShow) {
      loginfo.push("[" + (type.toUpperCase()) + "]");
    }
    loginfo.push(content);
    return loginfo.join(' ');
  };

  output2Console = function(content, type) {
    if (!_config.log2console) {
      return;
    }
    if (_config.log2console === true || _config.log2console[type]) {
      return console.log(content[type]);
    }
  };

  output2file = function(content, type) {
    if (!_config.log2file) {
      return;
    }
    if (_config.log2file === true || _config.log2file[type]) {
      return logfile.output(content, type);
    }
  };

  factory = function(type) {
    return function(content) {
      if (!content) {
        return;
      }
      content = format(content, type);
      output2Console(content, type);
      return output2file(content, type);
    };
  };

  extend = function(src, dist) {
    var property;
    if (!dist) {
      return src;
    }
    for (property in dist) {
      src[property] = dist[property];
    }
    return src;
  };

  Log = (function() {
    function Log() {
      var default_config;
      default_config = _path.join(process.cwd(), 'log4slow.json');
      if (_fs.existsSync(default_config) && _fs.statSync(default_config).isFile()) {
        _config = extend(_config, require(default_config));
        logfile.init(_config);
      }
    }

    Log.prototype.init = function(options) {
      _config = extend(_config, options);
      return logfile.init(_config);
    };

    Log.prototype.warn = factory('warn');

    Log.prototype.error = factory('error');

    Log.prototype.info = factory('info');

    Log.prototype.debug = factory('debug');

    return Log;

  })();

  module.exports = new Log();

}).call(this);
